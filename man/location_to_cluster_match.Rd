% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/location_cluster_match.R, R/plots.R
\name{location_to_cluster_match}
\alias{location_to_cluster_match}
\alias{plot.location_to_cluster_match}
\title{Match all locations to their cluster, via lat and long.}
\usage{
location_to_cluster_match(
  location_data,
  cluster_data,
  longitude_col_name = "longitude",
  latitude_col_name = "latitude",
  quiet = FALSE,
  ...
)

\method{plot}{location_to_cluster_match}(x, ...)
}
\arguments{
\item{location_data}{data.frame object that holds the location name,
latitude and longitude for all locations.}

\item{cluster_data}{data.frame object with all polygons. Each row represents
a different cluster with an \code{sf::POLYGON} or \code{sf::MULTIPOLYGON}
object that has the points that are joined to form that cluster.}

\item{longitude_col_name, latitude_col_name}{Character. Names of the columns
containing the longitude and latitud coordinates in \code{location_data}.}

\item{quiet}{Boolean. Keep quiet? If not, show warnings and messages.}

\item{...}{additional arguments}

\item{x}{\code{location_to_cluster_match()} output.}
}
\value{
A data frame where each row represents a location in \code{location_data}
and their specific cluster.
}
\description{
Match all location points to their clusters defined by user movement between
cities.
}
\examples{
location_df <- data.frame(
  location = c("Austin", "Los Angeles", "Buenos Aires"),
  country = c("United States", "United States", "Argentina")
)
location_df <- get_location_lat_long(
  location_df,
  location_col_name = "location",
  country_col_name = "country"
)
cluster_file <- filter_cluster_file(country_name = "United States")

# Note: location_df must contain latitude and longitude
# matched_df <- location_to_cluster_match(
#   location_df, cluster_file
# )
}
